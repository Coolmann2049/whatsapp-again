// On your Worker VPS
const express = require('express');
const router = express.Router();
const { Client, LocalAuth } = require('whatsapp-web.js');
const axios = require('axios'); // To send webhooks to the Main Backend
const dotenv = require('dotenv');

// Load environment variables
dotenv.config();

const MAIN_BACKEND_URL = 'https://your-main-backend.com/api/webhooks';

// 1. The container for all your client instances
const activeClients = {};

/**
 * Creates and initializes a new whatsapp-web.js client instance.
 * @param {string} clientId - A unique identifier for the client (e.g., their username or user ID).
 */
function initializeClient(clientId) {
    console.log(`Initializing client for: ${clientId}`);

    const client = new Client({
        // Use LocalAuth to save session data, ensuring each client has their own folder
        authStrategy: new LocalAuth({ clientId: clientId }),
        puppeteer: {
            headless: true,
            args: ['--no-sandbox', '--disable-setuid-sandbox']
        }
    });

    // --- Event Listeners for this specific client ---

    client.on('qr', (qr) => {
        console.log(`[${clientId}] QR Code received. Sending to Main Backend.`);
        // Send the QR code back to your Main Backend to be relayed to the frontend
        axios.post(`${MAIN_BACKEND_URL}/qr-update`, { clientId, qrCode: qr, auth: process.env.VPS_KEY });
    });

    client.on('ready', () => {
        console.log(`[${clientId}] Client is ready!`);
        // Notify the Main Backend that the connection is successful
        axios.post(`${MAIN_BACKEND_URL}/status-update`, { clientId, status: 'connected' });
    });

    client.on('disconnected', (reason) => {
        console.log(`[${clientId}] Client was logged out. Reason:`, reason);
        axios.post(`${MAIN_BACKEND_URL}/status-update`, { clientId, status: 'disconnected' });
        // Clean up the disconnected client
        delete activeClients[clientId];
    });

    client.on('message', (message) => {
        // Handle incoming messages for this client
        console.log(`[${clientId}] Received message:`, message.body);
    });

    // Start the initialization process
    client.initialize();

    // 2. Store the new client instance in our container
    activeClients[clientId] = client;
}

// --- API Endpoint to create new instances ---
// This endpoint would be called by your Main Backend.
router.post('/initialize-session', (req, res) => {
    const { clientId } = req.body;
    if (!clientId) {
        return res.status(400).send('clientId is required.');
    }
    if (activeClients[clientId]) {
        return res.status(200).send('Client already initialized.');
    }

    initializeClient(clientId);
    res.status(200).send('Initialization process started.');
});

module.exports = router;